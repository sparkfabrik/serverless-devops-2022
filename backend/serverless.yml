service: profile-api
frameworkVersion: '3'
useDotenv: true
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-resource-tagging
provider:
  name: aws
  profile: workshops
  region: eu-west-2
  runtime: nodejs14.x
  stage: ${opt:stage}
  memorySize: 128
  timeout: 30
  lambdaHashingVersion: 20201221
  apiName: ${opt:stage}-profile-api
  environment:
    CORS_VALID_ORIGINS: '*'
    STAGE: ${self:provider.stage}
    DYNAMODB_PROFILES_TABLE: ${opt:stage}-Profiles
  stackTags:
    Project: "${self:service}"
    Environment: "${opt:stage, 'local'}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:GetObject'
        - 's3:PutObject'
      Resource:
        - !GetAtt AssetsBucket.Arn
        - { Fn::Join: ['', [{ 'Fn::GetAtt': ['AssetsBucket', 'Arn'] }, '/*']] }
    - Effect: Allow
      Action:
        - 'cloudwatch:PutMetricData'
      Resource: '*'
    - Effect: Allow
      Action:
        - 'dynamodb:GetItem'
        - 'dynamodb:Scan'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource: !GetAtt ProfilesTable.Arn
    - Effect: Allow
      Action:
        - 'events:PutEvents'
      Resource: !GetAtt ProfileEventBus.Arn

functions:
  getSignedUrl:
    description: 'Get S3 signed url'
    handler: src/handlers/apiGateway/getSignedUrl.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET
      ASSETS_BUCKET: ${self:custom.assetsBucket}
    events:
      - http:
          path: get-signed-url
          method: get
          cors: true
  createProfileEvent:
    description: 'Listen to create profile event'
    handler: src/handlers/eventBridge/createProfile.handler
    environment:
      EVENT_BUS_NAME: ${self:custom.eventBusName}
    events:
      - eventBridge:
          eventBus: !GetAtt ProfileEventBus.Name
          pattern:
            source:
              - profile.created
          retryPolicy:
            maximumEventAge: 3600
            maximumRetryAttempts: 1
  createProfile:
    description: 'Create profile'
    handler: src/handlers/apiGateway/createProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,POST
    events:
      - http:
          path: profile
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(src/schemas/create.json)}

  updateProfile:
    description: 'Update profile'
    handler: src/handlers/apiGateway/updateProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,PUT
    events:
      - http:
          path: profile/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(src/schemas/update.json)}
  listProfiles:
    description: 'List profiles'
    handler: src/handlers/apiGateway/listProfiles.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET
    events:
      - http:
          path: profile/list
          method: get
          cors: true
  getProfile:
    description: 'Get public profile'
    handler: src/handlers/apiGateway/getProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,GET
    events:
      - http:
          path: profile/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
  deleteProfile:
    description: 'Delete profile'
    handler: src/handlers/apiGateway/deleteProfile.handler
    environment:
      CORS_VALID_METHODS: OPTIONS,DELETE
    events:
      - http:
          path: profile/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
  processFile:
    description: 'Process uploaded file'
    handler: src/handlers/s3/processFile.handler
    events:
      - s3:
          bucket: !Ref AssetsBucket
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv

resources:
  Resources:
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.assetsBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    ProfileEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.eventBusName}
    DataDashboard:
      Type: AWS::CloudWatch::Dashboard
      Properties:
        DashboardName: "profile-${self:provider.stage}-data"
        DashboardBody: ${file(./dashboard/body.js):getDataBody}
    ProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PROFILES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  assetsBucket: profile-assets-${aws:accountId}-${opt:stage}
  eventBusName: profile-events-${self:provider.stage}
  alarmEmail: 'email@email.null'
  webpack:
    webpackConfig: './webpack.config.js'
  serverless-offline:
    host: 0.0.0.0
